// #pragma once

// #include <iostream>
// #include <opencv2/core.hpp>
// #include <opencv2/opencv.hpp>
// #include "DBoW2/DBoW2.h"
// #include <cstdlib>
// #include <algorithm>
// #include <chrono>
// #include <random>
// #include <ctime>
// #include <functional>

// const static auto& _orb_OrbHandle = cv::ORB::create(2000,1.2,8,31,0,2);

// class loop_detector
// {
//     public:
//     OrbVocabulary _pvoc;//불러온 Vocabulary를 저장할 변수
//     OrbDatabase _pdb;//불러온 데이터베이스를 저장할 변수     
//     std::vector<std::vector<cv::Mat>> word_datas;
//     std::vector<std::vector<cv::KeyPoint>> keypoints_datas;
//     int image_size = 0;
//     std::vector<cv::String> SeqNames;
//     public:
    
//     loop_detector();
//     void GetFeature(cv::Mat image, std::vector<cv::Mat>&features, std::vector<cv::KeyPoint> &keypoints); // 이미지에서 vector형태로 feature를 얻습니다. 
//     void AddFeatureToVoc(std::vector<cv::Mat> &features, std::vector<cv::KeyPoint> &keypoints); // feature를 vocabulary에 추가합니다.
//     void CreateVoc(); // 추가된 image feature들로 vocabulary를 만듭니다.
//     void CreateDB(); // 추가된 image feature들로 vocabulary를 만듭니다.
//     void AddImagesToDB(); // DB에 현재이미지의 Feature를 추가합니다. 이때, 상대적인 키포인트 위치들도 저장합니다. 
//     void SaveSeqNames(std::vector<cv::String> argNames);
//     int FindQuIdx(cv::String QuName);
//     void SaveData(cv::String DbName);
//     void LoadData(cv::String DbName);
//     int loopDetect(int idx);
//     void QueryDB(int idx, DBoW2::QueryResults &ret);
//     void GetNormal_denom(int idx, double &denom);
//     cv::String getNameFromIdx(int idx);
//     void SortResult(DBoW2::QueryResults &ret, std::vector<DBoW2::Result> &sorted_ret);
//     void GroupMatch(std::vector<DBoW2::Result> &sorted_ret, int idx, double denom, std::vector<int> &groups, int &best_idx);
//     int GeometryCheck(int idx, int last_cand_idx);
// };