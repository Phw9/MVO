#include "LoopClosure.h"


loop_detector g_detect;
extern "C" {
    void MakeDB(wchar_t* path)
    {
        int len = 0;
        len = wcslen(path) + 1;
        char * c_path = new char[len];
        memset(c_path, 0, len);
        wcstombs(c_path, path, len);
        std::string folder_name(c_path);
        delete c_path;
        std::vector<cv::String> img_names;
        cv::glob(folder_name, img_names, false);
        std::cout << "시퀀스 길이 : " << img_names.size() <<std::endl;
        sort(img_names.begin(), img_names.end());
        g_detect.SaveSeqNames(img_names);
        std::chrono::system_clock::time_point start = std::chrono::system_clock::now();
        
        for(int i=0; i<img_names.size(); i++)
        {
            cv::Mat data_image = imread(img_names[i], cv::IMREAD_ANYCOLOR);
            std::vector<cv::Mat> descriptor;
            std::vector<cv::KeyPoint> keypoint;
            g_detect.GetFeature(data_image, descriptor, keypoint);
            g_detect.AddFeatureToVoc(descriptor, keypoint);            
        }
        std::chrono::system_clock::time_point end = std::chrono::system_clock::now();  
        std::chrono::microseconds microSec = std::chrono::duration_cast<std::chrono::microseconds>(end - start);  
        std::cout <<"word 뽑는데 걸린시간"<<microSec.count()/1000000. << " 초\n";

        start = std::chrono::system_clock::now();
        g_detect.CreateVoc();
        end = std::chrono::system_clock::now();  
        microSec = std::chrono::duration_cast<std::chrono::microseconds>(end - start);  
        std::cout << "VOC만드는데 걸린시간" << microSec.count()/1000000. << " 초\n";

        start = std::chrono::system_clock::now();
        g_detect.CreateDB();
        g_detect.AddImagesToDB();
        end = std::chrono::system_clock::now();  
        microSec = std::chrono::duration_cast<std::chrono::microseconds>(end - start);  
        std::cout << "DB만들고 더하는데 걸린시간" << microSec.count()/1000000. << " 초\n";
    }
    int FindImageIdx(wchar_t* path)
    {
        int len = 0;
        len = wcslen(path) + 1;
        char * c_path = new char[len];
        memset(c_path,0,len);
        wcstombs(c_path, path, len);
        cv::String QueryName = cv::String(std::string(c_path));
        int idx = g_detect.FindQuIdx(QueryName);
        return idx;
    }
    int FindQueryImageInDB(wchar_t* path)
    {
        //loop detection
        int len = 0;
        len = wcslen(path) + 1;
        char * c_path = new char[len];
        memset(c_path,0,len);
        wcstombs(c_path, path, len);
        cv::String QueryName = cv::String(std::string(c_path));
        int idx = g_detect.loopDetect(g_detect.FindQuIdx(QueryName));
        return idx;
    }
    void SaveDB(wchar_t* path)
    {
        int len = 0;
        len = wcslen(path) + 1;
        char * c_path = new char[len];
        memset(c_path,0,len);
        wcstombs(c_path, path, len);
        cv::String DbName = cv::String(std::string(c_path));
        g_detect.SaveData(DbName);
    }
    void LoadDB(wchar_t* path)
    {
        int len = 0;
        len = wcslen(path) + 1;
        char * c_path = new char[len];
        memset(c_path,0,len);
        wcstombs(c_path, path, len);
        cv::String DbName = cv::String(std::string(c_path));
        g_detect.LoadData(DbName);
    }
}

loop_detector::loop_detector()
{
    _pvoc = OrbVocabulary(9,3, DBoW2::TF_IDF, DBoW2::L1_NORM);
}
void loop_detector::GetFeature(cv::Mat image, std::vector<cv::Mat>&features, std::vector<cv::KeyPoint> &keypoints)
{
    cv::Mat descriptor;
    _orb_OrbHandle->detectAndCompute(image,cv::noArray(),keypoints,descriptor);
    features.resize(descriptor.rows);
    for(int i=0; i<descriptor.rows; i++)
    {
        features[i] = descriptor.row(i);
    }
}
void loop_detector::AddFeatureToVoc(std::vector<cv::Mat> &features, std::vector<cv::KeyPoint> &keypoints)
{
    word_datas.push_back(features);
    keypoints_datas.push_back(keypoints);
    image_size+=1;
}

void loop_detector::CreateVoc()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int> dis(0,word_datas.size()-1);
    std::vector<std::vector<cv::Mat>> sample_word;
    for(int i=0; i<200;i++)
    {
        sample_word.push_back(word_datas[dis(gen)]);
    }

    _pvoc.create(sample_word);
}
void loop_detector::CreateDB()
{
    _pdb = OrbDatabase(_pvoc,true,2);
}
void loop_detector::AddImagesToDB()
{
    for(int i=0; i< image_size; i++)
    {
        _pdb.add(word_datas[i]);
    }
}
void loop_detector::SaveSeqNames(std::vector<cv::String> argNames)
{
    SeqNames = argNames;
}
int loop_detector::FindQuIdx(cv::String QuName)
{
    auto it = find(SeqNames.begin(),SeqNames.end(),QuName);
    if(it ==SeqNames.end())
    {
        return -1;
    }
    else
    {
        return (int)(it-SeqNames.begin());
    }
}
void loop_detector::SaveData(cv::String DbName)
{
    cv::FileStorage store(DbName+cv::String("/Data.xml"), cv::FileStorage::WRITE);
    for(int i=0; i < image_size;i++)
    {
        write(store,"keypoints_datas_"+ std::to_string(i), keypoints_datas[i]);
        write(store,"word_datas_"+ std::to_string(i),word_datas[i]);
    }
    write(store,"SeqNames", SeqNames);
    write(store,"image_size", image_size);
    store.release();
    std::string db_name = std::string(DbName.c_str()) + std::string("/_pdb.yml.gz");
    std::string voc_name = std::string(DbName.c_str()) + std::string("/_pvoc.yml.gz");
    _pdb.save(db_name);
    _pvoc.save(voc_name);
}
void loop_detector::LoadData(cv::String DbName)
{
    word_datas.clear();
    keypoints_datas.clear();
    
    cv::FileStorage store(DbName+cv::String("/Data.xml"), cv::FileStorage::READ);
    cv::FileNode imsizeNode = store["image_size"];
    cv::read(imsizeNode,image_size,0);
    cv::FileNode seqNode = store["SeqNames"];
    cv::read(seqNode,SeqNames);
    for(int i=0; i<image_size;i++)
    {
        std::vector<cv::KeyPoint> tempkp;
        std::vector<cv::Mat> tempWord;
        cv::FileNode kpNode = store["keypoints_datas_" + std::to_string(i)];
        cv::FileNode wNode = store["word_datas_" + std::to_string(i)];
        cv::read(kpNode, tempkp);
        cv::read(wNode,tempWord);

        keypoints_datas.push_back(tempkp);
        word_datas.push_back(tempWord);
    }

    store.release();
    std::cout << DbName + cv::String("/Data.xml") << std::endl;
    std::string db_name = std::string(DbName.c_str()) + std::string("/_pdb.yml.gz");
    std::string voc_name = std::string(DbName.c_str()) + std::string("/_pvoc.yml.gz");
    std::cout << db_name << std::endl;
    std::cout << voc_name <<std::endl;
    _pvoc.load(voc_name);
    _pdb.load(db_name);
    
    std::cout << _pdb.size() << std::endl;
}

int loop_detector::loopDetect(int idx)
{
    DBoW2::QueryResults ret;
    QueryDB(idx,ret);
    double denom;
    GetNormal_denom(idx,denom);
    std::vector<DBoW2::Result> Results;
    SortResult(ret,Results);
    std::vector<int> candidate_groups;
    int last_cand_idx;
    GroupMatch(Results,idx,denom,candidate_groups,last_cand_idx);
    int match_idx =GeometryCheck(idx,last_cand_idx);
    
    return match_idx;
}

cv::String loop_detector::getNameFromIdx(int idx)
{
    return SeqNames[idx];
}

void loop_detector::QueryDB(int idx, DBoW2::QueryResults &ret)
{
    _pdb.query(word_datas[idx],ret,image_size,image_size);
    // for(int i=0; i<10;i++)
    // {
    //     cout<<"idx : "<<ret[i].Id<<", Score"<<ret[i].Score<<endl;
    // }
}

void loop_detector::GetNormal_denom(int idx, double &denom)
{
    int neighbor_bound = 3;
    int neighbor_start = 0;
    int neighbor_end = 0;
    if(idx <neighbor_bound)
    {
        neighbor_start = idx+1;
        neighbor_end = idx+neighbor_bound;
    }
    else
    {
        neighbor_start = idx-neighbor_bound;
        neighbor_end = idx-1;
    }

    DBoW2::BowVector v;
    _pvoc.transform(word_datas[idx],v);

    double min_score_prev = 0.005;
    double min_score =100;
    for(int i=neighbor_start; i<=neighbor_end; i++)
    {
        DBoW2::BowVector v_neighbor;
        _pvoc.transform(word_datas[i], v_neighbor);
        double score = this->_pvoc.score(v, v_neighbor);
        if(score<min_score_prev)
        {
            continue;
        }
        if(score<min_score)
        {
            min_score= score;
        }
    }
    if(min_score==100)
    {
        std::cout << "주변과 너무 다릅니다." <<std::endl;
    }
    else
    {
        std::cout << "최솟값 : " << min_score << std::endl;
    }
    denom = min_score;
}
void loop_detector::SortResult(DBoW2::QueryResults &ret, std::vector<DBoW2::Result> &sorted_ret)
{
    sorted_ret = std::vector<DBoW2::Result>(ret.size());

    for(int i=0; i<ret.size();i++)
    {
        sorted_ret[(int)(ret[i].Id)] = ret[i];
    }
    // cout<<sorted_ret.size()<<endl;
}
void loop_detector::GroupMatch(std::vector<DBoW2::Result> &sorted_ret,int idx,double denom, std::vector<int> &groups, int &best_idx)
{
    int group_size = 8;
    int query_place_bound = 100;
    double max_score =0;
    std::vector<int> max_group;
    int groups_count =0;
    int max_idx =-1;
    
    for(int i=0; i<sorted_ret.size(); i++)
    {
        if(i<group_size-1)
        {
            continue; // group이 생성이 안되는 곳이면 버립니다.
        }
        if(abs(idx-i)<query_place_bound)
        { // 너무 가까운 장소는 배제합니다. 
            continue;
        }
        bool bad_score= false;
        double sum_score = 0;
        std::vector<int> cand_group;
        int temp_max_score =0;
        int temp_max_idx =-1;
        for(int place_idx=group_size; place_idx>=0; place_idx--)
        {
            double norm_score = sorted_ret[i-place_idx].Score/denom;
            cand_group.push_back(i-place_idx);
            if(temp_max_score<norm_score)
            {
                temp_max_idx = i-place_idx;
                temp_max_score = norm_score;
            }
            if(norm_score <0.3)
            {
                bad_score =true;
                break;
            }
            sum_score +=norm_score;
        }
        if(bad_score)
        {
            continue;
        }
        groups_count++;
        if(sum_score>max_score)
        {
            max_score = sum_score;
            max_group = cand_group;
            max_idx = temp_max_idx;
        }
    }
    groups =max_group;
    best_idx = max_idx;
}
int loop_detector::GeometryCheck(int idx, int last_cand_idx)
{
    if(last_cand_idx ==-1)
    {
        return -1*last_cand_idx;
    }
    DBoW2::FeatureVector directIdx_query =_pdb.retrieveFeatures(idx);
    DBoW2::FeatureVector directIdx_candidate =_pdb.retrieveFeatures(last_cand_idx);
    
    //directIdx : map(node 이름, 각 feature 순서->키포인트 위치로 참조가능)
    std::vector<cv::Point2f> QueryPoints;
    std::vector<cv::Point2f> CandiPoints;
    for(int i=0; i<directIdx_query.size(); i++)
    {
        auto query_node = directIdx_query[i];
        auto candidate_node = directIdx_candidate[i];
        if(query_node.size()==0)
        {
            continue;
        }
        if(query_node.size()==0)
        {
            continue;
        }
        cv::Mat query_descriptor = word_datas[idx][query_node[0]];
        for(int j=1; j<query_node.size(); j++)
        {
            vconcat(query_descriptor,word_datas[idx][query_node[j]],query_descriptor);
        }
        cv::Mat candidate_descriptor = word_datas[last_cand_idx][candidate_node[0]];
        for(int j=1; j<candidate_node.size(); j++)
        {
            vconcat(candidate_descriptor,word_datas[last_cand_idx][candidate_node[j]],candidate_descriptor);
        }
        std::vector<cv::DMatch> matches;
        cv::Ptr<cv::DescriptorMatcher> _match_OrbMatchHandle = cv::BFMatcher::create(cv::NORM_HAMMING,true);
        _match_OrbMatchHandle->match(query_descriptor,candidate_descriptor,matches);
        sort(matches.begin(),matches.end());
        int match_size =matches.size() > 100? 100: matches.size();
        for(int i=0; i<match_size; i++)
        {
            cv::Point2f query_pt = keypoints_datas[idx][query_node[matches[i].queryIdx]].pt;
            cv::Point2f candi_pt = keypoints_datas[last_cand_idx][candidate_node[matches[i].trainIdx]].pt;
            QueryPoints.push_back(query_pt);
            CandiPoints.push_back(candi_pt);
        }
    }
    cv::Mat fundMat = findFundamentalMat(QueryPoints,CandiPoints);
    fundMat.convertTo(fundMat,CV_64FC1);
    std::vector<cv::Point3f> homo_QueryPoints;
    std::vector<cv::Point3f> homo_CandiPoints;
    convertPointsToHomogeneous(QueryPoints,homo_QueryPoints);
    convertPointsToHomogeneous(CandiPoints,homo_CandiPoints);
    int max_in =5;
    int inlier_count = 0;
    for(int i=0; i<QueryPoints.size(); i++)
    {
        cv::Mat first_point;
        cv::Mat(homo_QueryPoints[i]).convertTo(first_point, CV_64FC1);
        cv::Mat second_point;
        cv::Mat(homo_CandiPoints[i]).convertTo(second_point, CV_64FC1);
        double dist = sampsonDistance(first_point, second_point, fundMat);
        if(dist<max_in)
        {
            inlier_count++;
        }
    }
    if(inlier_count*100./QueryPoints.size()> 40)
    {
        std::cout << "일치율 : " << inlier_count*100./QueryPoints.size() << "%" << std::endl;
        return last_cand_idx;
    }
    else
    {
        std::cout << "일치율 : " << inlier_count*100./QueryPoints.size() << "%" << std::endl;
        return -1*last_cand_idx;
    }
}